---
import Layout from '../layouts/Layout.astro';
import { supabase } from '../lib/supabase.js';

// Verificação de autenticação
export const prerender = false;
const { cookies } = Astro;
const isClientAuth = cookies.get('client_auth')?.value === 'true';
const projectId = cookies.get('client_project_id')?.value;

if (!isClientAuth || !projectId) {
  return Astro.redirect('/login');
}

// Buscar informações do projeto
const { data: project, error: projectError } = await supabase
  .from('projects')
  .select('name, status, sample_count, project_id, email')
  .eq('id', projectId)
  .single();

// Buscar amostras do projeto
const { data: samples, error: samplesError } = await supabase
  .from('generic_samples')
  .select('*')
  .eq('project_id', projectId);

// Lista de etapas do pipeline
const pipelineSteps = [
  { id: 'projeto-gerado', label: 'Projeto gerado', description: 'Estamos preparando seu material de coleta.' },
  { id: 'material-enviado', label: 'Material enviado', description: 'Material de coleta está a caminho.' },
  { id: 'material-entregue', label: 'Material entregue', description: 'Pronto para iniciar a coleta.' },
  { id: 'amostras-coletadas', label: 'Amostras coletadas', description: 'Dados registrados no sistema.' },
  { id: 'amostras-enviadas', label: 'Amostras enviadas', description: 'Amostras a caminho do laboratório.' },
  { id: 'dna-extraido', label: 'DNA extraído', description: 'Extração em andamento.' },
  { id: 'dna-amplificado', label: 'DNA amplificado', description: 'Preparando para sequenciamento.' },
  { id: 'dna-sequenciado', label: 'DNA sequenciado', description: 'Alta tecnologia em ação.' },
  { id: 'analisando-dados', label: 'Analisando dados', description: 'Usando IA para entender o microbioma.' },
  { id: 'gerando-relatorio', label: 'Gerando relatório', description: 'Montando insights para você.' },
  { id: 'relatorio-entregue', label: 'Relatório entregue', description: 'Seu resultado está pronto!' },
];

// Identificar o passo atual no pipeline
const currentStep = pipelineSteps.findIndex(step => 
  step.label === project?.status
) || 0;

// Verificar se o cliente pode adicionar amostras neste estágio
const canAddSamples = project?.status === 'Material entregue' || project?.status === 'Amostras coletadas';
---

<Layout>
  <section class="min-h-screen bg-gradient-to-br from-blue-950 to-black text-white">
    <nav class="bg-white/10 backdrop-blur-xl border-b border-white/10 px-6 py-4 flex justify-between items-center">
      <div>
        <h1 class="text-2xl font-bold text-white">AlphaBioma</h1>
        <p class="text-white/70 text-sm">Portal do Cliente</p>
      </div>
      
      <div class="flex items-center gap-4">
        <div class="text-right hidden md:block">
          <p class="text-white font-medium">{project?.name}</p>
          <p class="text-white/70 text-sm">{project?.email}</p>
        </div>
        <form method="POST" action="/api/client-logout">
          <button type="submit" class="bg-white/10 px-4 py-2 rounded-lg hover:bg-white/20 transition text-white">
            Sair
          </button>
        </form>
      </div>
    </nav>
    
    <main class="max-w-6xl mx-auto px-6 py-12">
      {project ? (
        <div class="space-y-12">
          <!-- Header do projeto -->
          <div class="bg-white/5 border border-white/10 rounded-2xl p-6">
            <div class="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
              <div>
                <h2 class="text-3xl font-bold text-white">{project.name}</h2>
                <p class="text-white/70">ID do Projeto: {project.project_id}</p>
              </div>
              
              <div class="flex flex-wrap gap-4">
                <div class="bg-white/10 px-4 py-2 rounded-xl flex items-center gap-2">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <span class="text-sm font-medium">{project.status}</span>
                </div>
                
                <div class="bg-white/10 px-4 py-2 rounded-xl flex items-center gap-2">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-yellow-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                  </svg>
                  <span class="text-sm font-medium">{project.sample_count || 0} amostras</span>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Pipeline de status -->
          <div class="bg-white/5 border border-white/10 rounded-2xl p-6">
            <h3 class="text-2xl font-bold text-white mb-6">Progresso do Projeto</h3>
            
            <div class="w-full overflow-x-auto pb-4">
              <div class="min-w-max">
                <div class="flex items-center justify-between" style="width: 1100px;">
                  {pipelineSteps.map((step, index) => (
                    <div class="relative flex flex-col items-center">
                      <div 
                        class={`w-10 h-10 rounded-full flex items-center justify-center z-10 
                        ${index <= currentStep 
                          ? 'bg-blue-500 text-white' 
                          : 'bg-white/10 text-white/50'}`}
                      >
                        {index < currentStep ? (
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                          </svg>
                        ) : (
                          <span>{index + 1}</span>
                        )}
                      </div>
                      
                      {index < pipelineSteps.length - 1 && (
                        <div 
                          class={`absolute top-5 h-0.5 w-24 -right-12
                          ${index < currentStep ? 'bg-blue-500' : 'bg-white/10'}`}
                        ></div>
                      )}
                      
                      <div class="mt-3 w-24 text-center">
                        <p class={`text-xs font-medium ${index <= currentStep ? 'text-white' : 'text-white/50'}`}>
                          {step.label}
                        </p>
                        <p class="text-[10px] text-white/40 mt-1">{step.description}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
          
          <!-- Área de amostras -->
          <div class="bg-white/5 border border-white/10 rounded-2xl p-6">
            <div class="flex justify-between items-center mb-6">
              <h3 class="text-2xl font-bold text-white">Amostras</h3>
              
              {canAddSamples && (
                <button id="addSamplesBtn" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center gap-2 transition">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                  </svg>
                  Adicionar Amostras
                </button>
              )}
            </div>
            
            {/* Área para adicionar amostras (oculta por padrão) */}
            <div id="addSamplesArea" class="hidden mb-6 bg-white/10 rounded-xl p-4">
              <h4 class="text-lg font-semibold text-white mb-4">Adicionar Novas Amostras</h4>
              
              <form id="batchSampleForm" class="space-y-4">
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                  <div>
                    <label class="block text-white/70 text-sm mb-1">ID da Amostra</label>
                    <input type="text" id="sampleIdPattern" placeholder="ex: ABC-001" class="w-full bg-white/5 border border-white/20 rounded-lg p-2 text-white">
                    <p class="text-xs text-white/50 mt-1">Prefixo seguido de # para numeração</p>
                  </div>
                  
                  <div>
                    <label class="block text-white/70 text-sm mb-1">Número Inicial</label>
                    <input type="number" id="startNumber" value="1" class="w-full bg-white/5 border border-white/20 rounded-lg p-2 text-white">
                  </div>
                  
                  <div>
                    <label class="block text-white/70 text-sm mb-1">Quantidade</label>
                    <input type="number" id="batchCount" value="5" min="1" max="100" class="w-full bg-white/5 border border-white/20 rounded-lg p-2 text-white">
                  </div>
                </div>
                
                <div class="bg-white/5 rounded-xl p-4 overflow-x-auto">
                  <table class="w-full sample-table">
                    <thead>
                      <tr class="border-b border-white/10">
                        <th class="p-2 text-left text-white/70 text-sm">ID da Amostra</th>
                        <th class="p-2 text-left text-white/70 text-sm">ID do Animal</th>
                        <th class="p-2 text-left text-white/70 text-sm">Tratamento</th>
                        <th class="p-2 text-left text-white/70 text-sm">Observação</th>
                      </tr>
                    </thead>
                    <tbody id="sampleTableBody">
                      <!-- Preenchido via JavaScript -->
                    </tbody>
                  </table>
                </div>
                
                <div class="flex justify-end gap-3">
                  <button type="button" id="cancelAddSamples" class="bg-white/10 hover:bg-white/20 text-white px-4 py-2 rounded-lg transition">
                    Cancelar
                  </button>
                  <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition">
                    Salvar Amostras
                  </button>
                </div>
              </form>
            </div>
            
            <!-- Tabela de amostras existentes -->
            {samples && samples.length > 0 ? (
              <div class="overflow-x-auto">
                <table class="w-full">
                  <thead>
                    <tr class="border-b border-white/10">
                      <th class="p-3 text-left">ID da Amostra</th>
                      <th class="p-3 text-left">Animal</th>
                      <th class="p-3 text-left">Tratamento</th>
                      <th class="p-3 text-left">Status</th>
                      <th class="p-3 text-left">Data de Coleta</th>
                      {canAddSamples && <th class="p-3 text-left">Ações</th>}
                    </tr>
                  </thead>
                  <tbody>
                    {samples.map((sample) => (
                      <tr class="border-b border-white/5 hover:bg-white/5 transition">
                        <td class="p-3">{sample.sample_id}</td>
                        <td class="p-3">{sample.animal_id || '-'}</td>
                        <td class="p-3">{sample.treatment || '-'}</td>
                        <td class="p-3">
                          <span class={`px-2 py-1 rounded-full text-xs ${
                            sample.status === 'Coletado' ? 'bg-green-900/50 text-green-200' :
                            sample.status === 'Em processamento' ? 'bg-yellow-900/50 text-yellow-200' :
                            'bg-blue-900/50 text-blue-200'
                          }`}>
                            {sample.status}
                          </span>
                        </td>
                        <td class="p-3">{sample.collection_date ? new Date(sample.collection_date).toLocaleDateString() : '-'}</td>
                        {canAddSamples && (
                          <td class="p-3">
                            <button class="text-blue-400 hover:text-blue-300 transition edit-sample" data-id={sample.id}>
                              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                              </svg>
                            </button>
                          </td>
                        )}
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            ) : (
              <div class="text-center bg-white/5 rounded-xl p-8">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-white/30 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
                </svg>
                <p class="text-white/60">Nenhuma amostra cadastrada para este projeto.</p>
                {canAddSamples && (
                  <button id="noSamplesAdd" class="mt-4 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition">
                    Adicionar Primeiras Amostras
                  </button>
                )}
              </div>
            )}
          </div>
          
          <!-- Área de relatórios (apenas se o status for "Relatório entregue") -->
          {project.status === 'Relatório entregue' && (
            <div class="bg-white/5 border border-white/10 rounded-2xl p-6">
              <h3 class="text-2xl font-bold text-white mb-6">Resultados e Relatórios</h3>
              
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <a href="#" class="bg-white/10 rounded-xl p-4 hover:bg-white/15 transition flex items-center gap-4">
                  <div class="bg-blue-600/20 p-3 rounded-lg">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                  </div>
                  <div>
                    <h4 class="text-lg font-semibold text-white">Relatório Completo</h4>
                    <p class="text-sm text-white/60">Análise detalhada com insights sobre suas amostras</p>
                  </div>
                </a>
                
                <a href="#" class="bg-white/10 rounded-xl p-4 hover:bg-white/15 transition flex items-center gap-4">
                  <div class="bg-purple-600/20 p-3 rounded-lg">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-purple-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                  </div>
                  <div>
                    <h4 class="text-lg font-semibold text-white">Dados Brutos</h4>
                    <p class="text-sm text-white/60">Arquivos de dados para análises personalizadas</p>
                  </div>
                </a>
              </div>
            </div>
          )}
        </div>
      ) : (
        <div class="text-center py-12 bg-white/5 rounded-2xl border border-white/10">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-white/30 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
          </svg>
          <p class="text-2xl text-white/70">Erro ao carregar informações do projeto.</p>
          <p class="mt-2 text-white/50">Por favor, tente novamente mais tarde ou entre em contato com o suporte.</p>
          <a href="/login" class="mt-6 inline-block bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition">
            Voltar para Login
          </a>
        </div>
      )}
    </main>
  </section>
</Layout>

<script>
  // Scripts para adicionar amostras de forma dinâmica
  document.addEventListener('DOMContentLoaded', () => {
    const addSamplesBtn = document.getElementById('addSamplesBtn');
    const cancelAddBtn = document.getElementById('cancelAddSamples');
    const noSamplesAddBtn = document.getElementById('noSamplesAdd');
    const addSamplesArea = document.getElementById('addSamplesArea');
    const sampleTableBody = document.getElementById('sampleTableBody');
    const sampleIdPattern = document.getElementById('sampleIdPattern');
    const startNumber = document.getElementById('startNumber');
    const batchCount = document.getElementById('batchCount');
    const batchSampleForm = document.getElementById('batchSampleForm');
    
    // Função para mostrar a área de adicionar amostras
    const showAddSamplesArea = () => {
      addSamplesArea.classList.remove('hidden');
      generateSampleRows();
    };
    
    // Função para esconder a área de adicionar amostras
    const hideAddSamplesArea = () => {
      addSamplesArea.classList.add('hidden');
    };
    
    // Adicionar event listeners
    if (addSamplesBtn) {
      addSamplesBtn.addEventListener('click', showAddSamplesArea);
    }
    
    if (noSamplesAddBtn) {
      noSamplesAddBtn.addEventListener('click', showAddSamplesArea);
    }
    
    if (cancelAddBtn) {
      cancelAddBtn.addEventListener('click', hideAddSamplesArea);
    }
    
    // Função para gerar as linhas da tabela de amostras
    const generateSampleRows = () => {
      if (!sampleTableBody) return;
      
      const pattern = sampleIdPattern.value || 'SAMPLE-#';
      const start = parseInt(startNumber.value) || 1;
      const count = parseInt(batchCount.value) || 5;
      
      sampleTableBody.innerHTML = '';
      
      for (let i = 0; i < count; i++) {
        const num = start + i;
        const paddedNum = num.toString().padStart(3, '0');
        const sampleId = pattern.replace('#', paddedNum);
        
        const row = document.createElement('tr');
        row.className = 'border-b border-white/5';
        row.innerHTML = `
          <td class="p-2">
            <input type="text" name="sample_ids[]" value="${sampleId}" readonly class="w-full bg-white/5 border border-white/20 rounded p-1 text-white text-sm">
          </td>
          <td class="p-2">
            <input type="text" name="animal_ids[]" placeholder="ID Animal" class="w-full bg-white/5 border border-white/20 rounded p-1 text-white text-sm">
          </td>
          <td class="p-2">
            <input type="text" name="treatments[]" placeholder="Tratamento" class="w-full bg-white/5 border border-white/20 rounded p-1 text-white text-sm">
          </td>
          <td class="p-2">
            <input type="text" name="observations[]" placeholder="Observação (opcional)" class="w-full bg-white/5 border border-white/20 rounded p-1 text-white text-sm">
          </td>
        `;
        
        sampleTableBody.appendChild(row);
      }
    };
    
    // Reagir a mudanças nos campos de configuração
    if (sampleIdPattern && startNumber && batchCount) {
      sampleIdPattern.addEventListener('input', generateSampleRows);
      startNumber.addEventListener('input', generateSampleRows);
      batchCount.addEventListener('input', generateSampleRows);
    }
    
    // Processar o envio do formulário
    if (batchSampleForm) {
      batchSampleForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const formData = new FormData(batchSampleForm);
        
        try {
          const response = await fetch('/api/add-batch-samples', {
            method: 'POST',
            body: formData
          });
          
          if (response.ok) {
            // Recarregar a página para mostrar as novas amostras
            window.location.reload();
          } else {
            alert('Erro ao adicionar amostras. Por favor, tente novamente.');
          }
        } catch (error) {
          console.error('Erro ao enviar amostras:', error);
          alert('Ocorreu um erro. Por favor, tente novamente mais tarde.');
        }
      });
    }
  });
</script>